#    LearnMate - AI Learning Assistant
#    Copyright (C) 2024  Bruno CÃ©sar Brito Sant'Anna
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

name: release-pipeline

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (ex. 2024-01)'
        required: true
      next:
        description: 'Next version to release (ex. 2024-02)'
        required: true

env:
  JAVA_VERSION: '22'
  JAVA_DISTRO: 'temurin'

jobs:
  prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Retrieve tag exists flag
        uses: mukunku/tag-exists-action@v1.4.0
        id: checkTag
        with:
          tag: ${{ github.event.inputs.version }}

      - uses: actions/checkout@v4
        if: steps.checkTag.outputs.exists == 'false'
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: 'Set up Java'
        if: steps.checkTag.outputs.exists == 'false'
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: 'Configure Git user'
        if: steps.checkTag.outputs.exists == 'false'
        run: |
          git config --global user.email "mail@bsantanna.me"
          git config --global user.name "Bruno Sant'Anna"

      - name: 'Prepare release'
        if: steps.checkTag.outputs.exists == 'false'
        run: |
          RELEASE_VERSION=${{ github.event.inputs.version }}
          NEXT_VERSION=${{ github.event.inputs.next }}
          mvn -B -ntp release:prepare -B -Dusername=bsantanna -Dpassword=${{ secrets.LERNMATE_PAT }} -Dtag=$RELEASE_VERSION -DreleaseVersion=$RELEASE_VERSION -DdevelopmentVersion="${NEXT_VERSION}-SNAPSHOT"

  # Build Project
  cli:
    needs: [ prepare ]
    name: 'Build Artifact on ${{ matrix.os }}'
    strategy:
      fail-fast: true
      matrix:
        os: [ ubuntu-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version }}
          fetch-depth: 0

      - name: 'Cache Maven packages'
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: 'Package with release profile'
        run: mvn -B -ntp package

  # Collect all release candidates and release
  release:
    needs: [ cli ]
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out repository'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # otherwise, pushing refs to dest repo fails

      - name: 'Checkout tag'
        run: |
          git fetch --all
          git checkout --progress --force refs/tags/${{ github.event.inputs.version }}

      - name: 'Download all build artifacts'
        uses: actions/download-artifact@v3

      - name: 'Set up Java'
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DISTRO }}

      - name: 'Cache Maven packages'
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven-

      - name: 'Release with JReleaser'
        env:
          JRELEASER_GITHUB_TOKEN: ${{ secrets.LERNMATE_PAT }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.JRELEASER_GPG_PASSPHRASE }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.JRELEASER_GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.JRELEASER_GPG_SECRET_KEY }}
        run: mvn -N -B -ntp -DartifactsDir=artifacts jreleaser:full-release
